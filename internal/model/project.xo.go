package model

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

// Project represents a row from 'public.projects'.
type Project struct {
	ID           uuid.UUID      `json:"id"`             // id
	GithubRepoID string         `json:"github_repo_id"` // github_repo_id
	Name         string         `json:"name"`           // name
	Description  sql.NullString `json:"description"`    // description
	IsActive     sql.NullBool   `json:"is_active"`      // is_active
	CreatedAt    sql.NullTime   `json:"created_at"`     // created_at
	UpdatedAt    sql.NullTime   `json:"updated_at"`     // updated_at
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [Project] exists in the database.
func (p *Project) Exists() bool {
	return p._exists
}

// Deleted returns true when the [Project] has been marked for deletion
// from the database.
func (p *Project) Deleted() bool {
	return p._deleted
}

// Insert inserts the [Project] to the database.
func (p *Project) Insert(ctx context.Context, db DB) error {
	switch {
	case p._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case p._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (manual)
	const sqlstr = `INSERT INTO public.projects (` +
		`id, github_repo_id, name, description, is_active, created_at, updated_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7` +
		`)`
	// run
	logf(sqlstr, p.ID, p.GithubRepoID, p.Name, p.Description, p.IsActive, p.CreatedAt, p.UpdatedAt)
	if _, err := db.ExecContext(ctx, sqlstr, p.ID, p.GithubRepoID, p.Name, p.Description, p.IsActive, p.CreatedAt, p.UpdatedAt); err != nil {
		return logerror(err)
	}
	// set exists
	p._exists = true
	return nil
}

// Update updates a [Project] in the database.
func (p *Project) Update(ctx context.Context, db DB) error {
	switch {
	case !p._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case p._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.projects SET ` +
		`github_repo_id = $1, name = $2, description = $3, is_active = $4, created_at = $5, updated_at = $6 ` +
		`WHERE id = $7`
	// run
	logf(sqlstr, p.GithubRepoID, p.Name, p.Description, p.IsActive, p.CreatedAt, p.UpdatedAt, p.ID)
	if _, err := db.ExecContext(ctx, sqlstr, p.GithubRepoID, p.Name, p.Description, p.IsActive, p.CreatedAt, p.UpdatedAt, p.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [Project] to the database.
func (p *Project) Save(ctx context.Context, db DB) error {
	if p.Exists() {
		return p.Update(ctx, db)
	}
	return p.Insert(ctx, db)
}

// Upsert performs an upsert for [Project].
func (p *Project) Upsert(ctx context.Context, db DB) error {
	switch {
	case p._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.projects (` +
		`id, github_repo_id, name, description, is_active, created_at, updated_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`github_repo_id = EXCLUDED.github_repo_id, name = EXCLUDED.name, description = EXCLUDED.description, is_active = EXCLUDED.is_active, created_at = EXCLUDED.created_at, updated_at = EXCLUDED.updated_at `
	// run
	logf(sqlstr, p.ID, p.GithubRepoID, p.Name, p.Description, p.IsActive, p.CreatedAt, p.UpdatedAt)
	if _, err := db.ExecContext(ctx, sqlstr, p.ID, p.GithubRepoID, p.Name, p.Description, p.IsActive, p.CreatedAt, p.UpdatedAt); err != nil {
		return logerror(err)
	}
	// set exists
	p._exists = true
	return nil
}

// Delete deletes the [Project] from the database.
func (p *Project) Delete(ctx context.Context, db DB) error {
	switch {
	case !p._exists: // doesn't exist
		return nil
	case p._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.projects ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, p.ID)
	if _, err := db.ExecContext(ctx, sqlstr, p.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	p._deleted = true
	return nil
}

// ProjectByGithubRepoID retrieves a row from 'public.projects' as a [Project].
//
// Generated from index 'projects_github_repo_id_key'.
func ProjectByGithubRepoID(ctx context.Context, db DB, githubRepoID string) (*Project, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, github_repo_id, name, description, is_active, created_at, updated_at ` +
		`FROM public.projects ` +
		`WHERE github_repo_id = $1`
	// run
	logf(sqlstr, githubRepoID)
	p := Project{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, githubRepoID).Scan(&p.ID, &p.GithubRepoID, &p.Name, &p.Description, &p.IsActive, &p.CreatedAt, &p.UpdatedAt); err != nil {
		return nil, logerror(err)
	}
	return &p, nil
}

// ProjectByID retrieves a row from 'public.projects' as a [Project].
//
// Generated from index 'projects_pkey'.
func ProjectByID(ctx context.Context, db DB, id uuid.UUID) (*Project, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, github_repo_id, name, description, is_active, created_at, updated_at ` +
		`FROM public.projects ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	p := Project{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&p.ID, &p.GithubRepoID, &p.Name, &p.Description, &p.IsActive, &p.CreatedAt, &p.UpdatedAt); err != nil {
		return nil, logerror(err)
	}
	return &p, nil
}
