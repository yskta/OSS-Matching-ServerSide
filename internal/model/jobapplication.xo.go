package model

// Code generated by xo. DO NOT EDIT.

import (
	"context"

	"github.com/google/uuid"
)

// JobApplication represents a row from 'public.job_applications'.
type JobApplication struct {
	ID           uuid.UUID            `json:"id"`             // id
	JobPostingID uuid.UUID            `json:"job_posting_id"` // job_posting_id
	UserID       uuid.UUID            `json:"user_id"`        // user_id
	Status       JobApplicationStatus `json:"status"`         // status
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [JobApplication] exists in the database.
func (ja *JobApplication) Exists() bool {
	return ja._exists
}

// Deleted returns true when the [JobApplication] has been marked for deletion
// from the database.
func (ja *JobApplication) Deleted() bool {
	return ja._deleted
}

// Insert inserts the [JobApplication] to the database.
func (ja *JobApplication) Insert(ctx context.Context, db DB) error {
	switch {
	case ja._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case ja._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (manual)
	const sqlstr = `INSERT INTO public.job_applications (` +
		`id, job_posting_id, user_id, status` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`)`
	// run
	logf(sqlstr, ja.ID, ja.JobPostingID, ja.UserID, ja.Status)
	if _, err := db.ExecContext(ctx, sqlstr, ja.ID, ja.JobPostingID, ja.UserID, ja.Status); err != nil {
		return logerror(err)
	}
	// set exists
	ja._exists = true
	return nil
}

// Update updates a [JobApplication] in the database.
func (ja *JobApplication) Update(ctx context.Context, db DB) error {
	switch {
	case !ja._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case ja._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.job_applications SET ` +
		`job_posting_id = $1, user_id = $2, status = $3 ` +
		`WHERE id = $4`
	// run
	logf(sqlstr, ja.JobPostingID, ja.UserID, ja.Status, ja.ID)
	if _, err := db.ExecContext(ctx, sqlstr, ja.JobPostingID, ja.UserID, ja.Status, ja.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [JobApplication] to the database.
func (ja *JobApplication) Save(ctx context.Context, db DB) error {
	if ja.Exists() {
		return ja.Update(ctx, db)
	}
	return ja.Insert(ctx, db)
}

// Upsert performs an upsert for [JobApplication].
func (ja *JobApplication) Upsert(ctx context.Context, db DB) error {
	switch {
	case ja._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.job_applications (` +
		`id, job_posting_id, user_id, status` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`job_posting_id = EXCLUDED.job_posting_id, user_id = EXCLUDED.user_id, status = EXCLUDED.status `
	// run
	logf(sqlstr, ja.ID, ja.JobPostingID, ja.UserID, ja.Status)
	if _, err := db.ExecContext(ctx, sqlstr, ja.ID, ja.JobPostingID, ja.UserID, ja.Status); err != nil {
		return logerror(err)
	}
	// set exists
	ja._exists = true
	return nil
}

// Delete deletes the [JobApplication] from the database.
func (ja *JobApplication) Delete(ctx context.Context, db DB) error {
	switch {
	case !ja._exists: // doesn't exist
		return nil
	case ja._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.job_applications ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, ja.ID)
	if _, err := db.ExecContext(ctx, sqlstr, ja.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	ja._deleted = true
	return nil
}

// JobApplicationByJobPostingIDUserID retrieves a row from 'public.job_applications' as a [JobApplication].
//
// Generated from index 'job_applications_job_posting_id_user_id_key'.
func JobApplicationByJobPostingIDUserID(ctx context.Context, db DB, jobPostingID, userID uuid.UUID) (*JobApplication, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, job_posting_id, user_id, status ` +
		`FROM public.job_applications ` +
		`WHERE job_posting_id = $1 AND user_id = $2`
	// run
	logf(sqlstr, jobPostingID, userID)
	ja := JobApplication{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, jobPostingID, userID).Scan(&ja.ID, &ja.JobPostingID, &ja.UserID, &ja.Status); err != nil {
		return nil, logerror(err)
	}
	return &ja, nil
}

// JobApplicationByID retrieves a row from 'public.job_applications' as a [JobApplication].
//
// Generated from index 'job_applications_pkey'.
func JobApplicationByID(ctx context.Context, db DB, id uuid.UUID) (*JobApplication, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, job_posting_id, user_id, status ` +
		`FROM public.job_applications ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	ja := JobApplication{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&ja.ID, &ja.JobPostingID, &ja.UserID, &ja.Status); err != nil {
		return nil, logerror(err)
	}
	return &ja, nil
}

// JobPosting returns the JobPosting associated with the [JobApplication]'s (JobPostingID).
//
// Generated from foreign key 'job_applications_job_posting_id_fkey'.
func (ja *JobApplication) JobPosting(ctx context.Context, db DB) (*JobPosting, error) {
	return JobPostingByID(ctx, db, ja.JobPostingID)
}

// User returns the User associated with the [JobApplication]'s (UserID).
//
// Generated from foreign key 'job_applications_user_id_fkey'.
func (ja *JobApplication) User(ctx context.Context, db DB) (*User, error) {
	return UserByID(ctx, db, ja.UserID)
}
