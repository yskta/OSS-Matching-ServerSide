package model

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

// JobPosting represents a row from 'public.job_postings'.
type JobPosting struct {
	ID          uuid.UUID        `json:"id"`          // id
	ProjectID   uuid.UUID        `json:"project_id"`  // project_id
	Title       string           `json:"title"`       // title
	Description sql.NullString   `json:"description"` // description
	Status      JobPostingStatus `json:"status"`      // status
	Deadline    sql.NullTime     `json:"deadline"`    // deadline
	CreatedAt   sql.NullTime     `json:"created_at"`  // created_at
	UpdatedAt   sql.NullTime     `json:"updated_at"`  // updated_at
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [JobPosting] exists in the database.
func (jp *JobPosting) Exists() bool {
	return jp._exists
}

// Deleted returns true when the [JobPosting] has been marked for deletion
// from the database.
func (jp *JobPosting) Deleted() bool {
	return jp._deleted
}

// Insert inserts the [JobPosting] to the database.
func (jp *JobPosting) Insert(ctx context.Context, db DB) error {
	switch {
	case jp._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case jp._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (manual)
	const sqlstr = `INSERT INTO public.job_postings (` +
		`id, project_id, title, description, status, deadline, created_at, updated_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8` +
		`)`
	// run
	logf(sqlstr, jp.ID, jp.ProjectID, jp.Title, jp.Description, jp.Status, jp.Deadline, jp.CreatedAt, jp.UpdatedAt)
	if _, err := db.ExecContext(ctx, sqlstr, jp.ID, jp.ProjectID, jp.Title, jp.Description, jp.Status, jp.Deadline, jp.CreatedAt, jp.UpdatedAt); err != nil {
		return logerror(err)
	}
	// set exists
	jp._exists = true
	return nil
}

// Update updates a [JobPosting] in the database.
func (jp *JobPosting) Update(ctx context.Context, db DB) error {
	switch {
	case !jp._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case jp._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.job_postings SET ` +
		`project_id = $1, title = $2, description = $3, status = $4, deadline = $5, created_at = $6, updated_at = $7 ` +
		`WHERE id = $8`
	// run
	logf(sqlstr, jp.ProjectID, jp.Title, jp.Description, jp.Status, jp.Deadline, jp.CreatedAt, jp.UpdatedAt, jp.ID)
	if _, err := db.ExecContext(ctx, sqlstr, jp.ProjectID, jp.Title, jp.Description, jp.Status, jp.Deadline, jp.CreatedAt, jp.UpdatedAt, jp.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [JobPosting] to the database.
func (jp *JobPosting) Save(ctx context.Context, db DB) error {
	if jp.Exists() {
		return jp.Update(ctx, db)
	}
	return jp.Insert(ctx, db)
}

// Upsert performs an upsert for [JobPosting].
func (jp *JobPosting) Upsert(ctx context.Context, db DB) error {
	switch {
	case jp._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.job_postings (` +
		`id, project_id, title, description, status, deadline, created_at, updated_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`project_id = EXCLUDED.project_id, title = EXCLUDED.title, description = EXCLUDED.description, status = EXCLUDED.status, deadline = EXCLUDED.deadline, created_at = EXCLUDED.created_at, updated_at = EXCLUDED.updated_at `
	// run
	logf(sqlstr, jp.ID, jp.ProjectID, jp.Title, jp.Description, jp.Status, jp.Deadline, jp.CreatedAt, jp.UpdatedAt)
	if _, err := db.ExecContext(ctx, sqlstr, jp.ID, jp.ProjectID, jp.Title, jp.Description, jp.Status, jp.Deadline, jp.CreatedAt, jp.UpdatedAt); err != nil {
		return logerror(err)
	}
	// set exists
	jp._exists = true
	return nil
}

// Delete deletes the [JobPosting] from the database.
func (jp *JobPosting) Delete(ctx context.Context, db DB) error {
	switch {
	case !jp._exists: // doesn't exist
		return nil
	case jp._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.job_postings ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, jp.ID)
	if _, err := db.ExecContext(ctx, sqlstr, jp.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	jp._deleted = true
	return nil
}

// JobPostingByID retrieves a row from 'public.job_postings' as a [JobPosting].
//
// Generated from index 'job_postings_pkey'.
func JobPostingByID(ctx context.Context, db DB, id uuid.UUID) (*JobPosting, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, project_id, title, description, status, deadline, created_at, updated_at ` +
		`FROM public.job_postings ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	jp := JobPosting{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&jp.ID, &jp.ProjectID, &jp.Title, &jp.Description, &jp.Status, &jp.Deadline, &jp.CreatedAt, &jp.UpdatedAt); err != nil {
		return nil, logerror(err)
	}
	return &jp, nil
}

// Project returns the Project associated with the [JobPosting]'s (ProjectID).
//
// Generated from foreign key 'job_postings_project_id_fkey'.
func (jp *JobPosting) Project(ctx context.Context, db DB) (*Project, error) {
	return ProjectByID(ctx, db, jp.ProjectID)
}
