package model

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql/driver"
	"fmt"
)

// JobApplicationStatus is the 'job_application_status' enum type from schema 'public'.
type JobApplicationStatus uint16

// JobApplicationStatus values.
const (
	// JobApplicationStatusProgress is the 'progress' job_application_status.
	JobApplicationStatusProgress JobApplicationStatus = 1
	// JobApplicationStatusPending is the 'pending' job_application_status.
	JobApplicationStatusPending JobApplicationStatus = 2
	// JobApplicationStatusApproved is the 'approved' job_application_status.
	JobApplicationStatusApproved JobApplicationStatus = 3
	// JobApplicationStatusRejected is the 'rejected' job_application_status.
	JobApplicationStatusRejected JobApplicationStatus = 4
	// JobApplicationStatusWithdrawn is the 'withdrawn' job_application_status.
	JobApplicationStatusWithdrawn JobApplicationStatus = 5
)

// String satisfies the [fmt.Stringer] interface.
func (jas JobApplicationStatus) String() string {
	switch jas {
	case JobApplicationStatusProgress:
		return "progress"
	case JobApplicationStatusPending:
		return "pending"
	case JobApplicationStatusApproved:
		return "approved"
	case JobApplicationStatusRejected:
		return "rejected"
	case JobApplicationStatusWithdrawn:
		return "withdrawn"
	}
	return fmt.Sprintf("JobApplicationStatus(%d)", jas)
}

// MarshalText marshals [JobApplicationStatus] into text.
func (jas JobApplicationStatus) MarshalText() ([]byte, error) {
	return []byte(jas.String()), nil
}

// UnmarshalText unmarshals [JobApplicationStatus] from text.
func (jas *JobApplicationStatus) UnmarshalText(buf []byte) error {
	switch str := string(buf); str {
	case "progress":
		*jas = JobApplicationStatusProgress
	case "pending":
		*jas = JobApplicationStatusPending
	case "approved":
		*jas = JobApplicationStatusApproved
	case "rejected":
		*jas = JobApplicationStatusRejected
	case "withdrawn":
		*jas = JobApplicationStatusWithdrawn
	default:
		return ErrInvalidJobApplicationStatus(str)
	}
	return nil
}

// Value satisfies the [driver.Valuer] interface.
func (jas JobApplicationStatus) Value() (driver.Value, error) {
	return jas.String(), nil
}

// Scan satisfies the [sql.Scanner] interface.
func (jas *JobApplicationStatus) Scan(v interface{}) error {
	switch x := v.(type) {
	case []byte:
		return jas.UnmarshalText(x)
	case string:
		return jas.UnmarshalText([]byte(x))
	}
	return ErrInvalidJobApplicationStatus(fmt.Sprintf("%T", v))
}

// NullJobApplicationStatus represents a null 'job_application_status' enum for schema 'public'.
type NullJobApplicationStatus struct {
	JobApplicationStatus JobApplicationStatus
	// Valid is true if [JobApplicationStatus] is not null.
	Valid bool
}

// Value satisfies the [driver.Valuer] interface.
func (njas NullJobApplicationStatus) Value() (driver.Value, error) {
	if !njas.Valid {
		return nil, nil
	}
	return njas.JobApplicationStatus.Value()
}

// Scan satisfies the [sql.Scanner] interface.
func (njas *NullJobApplicationStatus) Scan(v interface{}) error {
	if v == nil {
		njas.JobApplicationStatus, njas.Valid = 0, false
		return nil
	}
	err := njas.JobApplicationStatus.Scan(v)
	njas.Valid = err == nil
	return err
}

// ErrInvalidJobApplicationStatus is the invalid [JobApplicationStatus] error.
type ErrInvalidJobApplicationStatus string

// Error satisfies the error interface.
func (err ErrInvalidJobApplicationStatus) Error() string {
	return fmt.Sprintf("invalid JobApplicationStatus(%s)", string(err))
}
