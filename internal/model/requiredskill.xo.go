package model

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

// RequiredSkill represents a row from 'public.required_skills'.
type RequiredSkill struct {
	ID           uuid.UUID      `json:"id"`             // id
	JobPostingID uuid.UUID      `json:"job_posting_id"` // job_posting_id
	Name         string         `json:"name"`           // name
	Level        sql.NullString `json:"level"`          // level
	CreatedAt    sql.NullTime   `json:"created_at"`     // created_at
	UpdatedAt    sql.NullTime   `json:"updated_at"`     // updated_at
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [RequiredSkill] exists in the database.
func (rs *RequiredSkill) Exists() bool {
	return rs._exists
}

// Deleted returns true when the [RequiredSkill] has been marked for deletion
// from the database.
func (rs *RequiredSkill) Deleted() bool {
	return rs._deleted
}

// Insert inserts the [RequiredSkill] to the database.
func (rs *RequiredSkill) Insert(ctx context.Context, db DB) error {
	switch {
	case rs._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case rs._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (manual)
	const sqlstr = `INSERT INTO public.required_skills (` +
		`id, job_posting_id, name, level, created_at, updated_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6` +
		`)`
	// run
	logf(sqlstr, rs.ID, rs.JobPostingID, rs.Name, rs.Level, rs.CreatedAt, rs.UpdatedAt)
	if _, err := db.ExecContext(ctx, sqlstr, rs.ID, rs.JobPostingID, rs.Name, rs.Level, rs.CreatedAt, rs.UpdatedAt); err != nil {
		return logerror(err)
	}
	// set exists
	rs._exists = true
	return nil
}

// Update updates a [RequiredSkill] in the database.
func (rs *RequiredSkill) Update(ctx context.Context, db DB) error {
	switch {
	case !rs._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case rs._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.required_skills SET ` +
		`job_posting_id = $1, name = $2, level = $3, created_at = $4, updated_at = $5 ` +
		`WHERE id = $6`
	// run
	logf(sqlstr, rs.JobPostingID, rs.Name, rs.Level, rs.CreatedAt, rs.UpdatedAt, rs.ID)
	if _, err := db.ExecContext(ctx, sqlstr, rs.JobPostingID, rs.Name, rs.Level, rs.CreatedAt, rs.UpdatedAt, rs.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [RequiredSkill] to the database.
func (rs *RequiredSkill) Save(ctx context.Context, db DB) error {
	if rs.Exists() {
		return rs.Update(ctx, db)
	}
	return rs.Insert(ctx, db)
}

// Upsert performs an upsert for [RequiredSkill].
func (rs *RequiredSkill) Upsert(ctx context.Context, db DB) error {
	switch {
	case rs._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.required_skills (` +
		`id, job_posting_id, name, level, created_at, updated_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`job_posting_id = EXCLUDED.job_posting_id, name = EXCLUDED.name, level = EXCLUDED.level, created_at = EXCLUDED.created_at, updated_at = EXCLUDED.updated_at `
	// run
	logf(sqlstr, rs.ID, rs.JobPostingID, rs.Name, rs.Level, rs.CreatedAt, rs.UpdatedAt)
	if _, err := db.ExecContext(ctx, sqlstr, rs.ID, rs.JobPostingID, rs.Name, rs.Level, rs.CreatedAt, rs.UpdatedAt); err != nil {
		return logerror(err)
	}
	// set exists
	rs._exists = true
	return nil
}

// Delete deletes the [RequiredSkill] from the database.
func (rs *RequiredSkill) Delete(ctx context.Context, db DB) error {
	switch {
	case !rs._exists: // doesn't exist
		return nil
	case rs._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.required_skills ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, rs.ID)
	if _, err := db.ExecContext(ctx, sqlstr, rs.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	rs._deleted = true
	return nil
}

// RequiredSkillByID retrieves a row from 'public.required_skills' as a [RequiredSkill].
//
// Generated from index 'required_skills_pkey'.
func RequiredSkillByID(ctx context.Context, db DB, id uuid.UUID) (*RequiredSkill, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, job_posting_id, name, level, created_at, updated_at ` +
		`FROM public.required_skills ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	rs := RequiredSkill{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&rs.ID, &rs.JobPostingID, &rs.Name, &rs.Level, &rs.CreatedAt, &rs.UpdatedAt); err != nil {
		return nil, logerror(err)
	}
	return &rs, nil
}

// JobPosting returns the JobPosting associated with the [RequiredSkill]'s (JobPostingID).
//
// Generated from foreign key 'required_skills_job_posting_id_fkey'.
func (rs *RequiredSkill) JobPosting(ctx context.Context, db DB) (*JobPosting, error) {
	return JobPostingByID(ctx, db, rs.JobPostingID)
}
