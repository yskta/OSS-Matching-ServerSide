package model

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

// ProjectContributor represents a row from 'public.project_contributors'.
type ProjectContributor struct {
	ProjectID           uuid.UUID    `json:"project_id"`             // project_id
	UserID              uuid.UUID    `json:"user_id"`                // user_id
	Role                string       `json:"role"`                   // role
	CanManageJobPosting sql.NullBool `json:"can_manage_job_posting"` // can_manage_job_posting
	CreatedAt           sql.NullTime `json:"created_at"`             // created_at
	UpdatedAt           sql.NullTime `json:"updated_at"`             // updated_at
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [ProjectContributor] exists in the database.
func (pc *ProjectContributor) Exists() bool {
	return pc._exists
}

// Deleted returns true when the [ProjectContributor] has been marked for deletion
// from the database.
func (pc *ProjectContributor) Deleted() bool {
	return pc._deleted
}

// Insert inserts the [ProjectContributor] to the database.
func (pc *ProjectContributor) Insert(ctx context.Context, db DB) error {
	switch {
	case pc._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case pc._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (manual)
	const sqlstr = `INSERT INTO public.project_contributors (` +
		`project_id, user_id, role, can_manage_job_posting, created_at, updated_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6` +
		`)`
	// run
	logf(sqlstr, pc.ProjectID, pc.UserID, pc.Role, pc.CanManageJobPosting, pc.CreatedAt, pc.UpdatedAt)
	if _, err := db.ExecContext(ctx, sqlstr, pc.ProjectID, pc.UserID, pc.Role, pc.CanManageJobPosting, pc.CreatedAt, pc.UpdatedAt); err != nil {
		return logerror(err)
	}
	// set exists
	pc._exists = true
	return nil
}

// Update updates a [ProjectContributor] in the database.
func (pc *ProjectContributor) Update(ctx context.Context, db DB) error {
	switch {
	case !pc._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case pc._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.project_contributors SET ` +
		`role = $1, can_manage_job_posting = $2, created_at = $3, updated_at = $4 ` +
		`WHERE project_id = $5 AND user_id = $6`
	// run
	logf(sqlstr, pc.Role, pc.CanManageJobPosting, pc.CreatedAt, pc.UpdatedAt, pc.ProjectID, pc.UserID)
	if _, err := db.ExecContext(ctx, sqlstr, pc.Role, pc.CanManageJobPosting, pc.CreatedAt, pc.UpdatedAt, pc.ProjectID, pc.UserID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [ProjectContributor] to the database.
func (pc *ProjectContributor) Save(ctx context.Context, db DB) error {
	if pc.Exists() {
		return pc.Update(ctx, db)
	}
	return pc.Insert(ctx, db)
}

// Upsert performs an upsert for [ProjectContributor].
func (pc *ProjectContributor) Upsert(ctx context.Context, db DB) error {
	switch {
	case pc._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.project_contributors (` +
		`project_id, user_id, role, can_manage_job_posting, created_at, updated_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6` +
		`)` +
		` ON CONFLICT (project_id, user_id) DO ` +
		`UPDATE SET ` +
		`role = EXCLUDED.role, can_manage_job_posting = EXCLUDED.can_manage_job_posting, created_at = EXCLUDED.created_at, updated_at = EXCLUDED.updated_at `
	// run
	logf(sqlstr, pc.ProjectID, pc.UserID, pc.Role, pc.CanManageJobPosting, pc.CreatedAt, pc.UpdatedAt)
	if _, err := db.ExecContext(ctx, sqlstr, pc.ProjectID, pc.UserID, pc.Role, pc.CanManageJobPosting, pc.CreatedAt, pc.UpdatedAt); err != nil {
		return logerror(err)
	}
	// set exists
	pc._exists = true
	return nil
}

// Delete deletes the [ProjectContributor] from the database.
func (pc *ProjectContributor) Delete(ctx context.Context, db DB) error {
	switch {
	case !pc._exists: // doesn't exist
		return nil
	case pc._deleted: // deleted
		return nil
	}
	// delete with composite primary key
	const sqlstr = `DELETE FROM public.project_contributors ` +
		`WHERE project_id = $1 AND user_id = $2`
	// run
	logf(sqlstr, pc.ProjectID, pc.UserID)
	if _, err := db.ExecContext(ctx, sqlstr, pc.ProjectID, pc.UserID); err != nil {
		return logerror(err)
	}
	// set deleted
	pc._deleted = true
	return nil
}

// ProjectContributorByProjectIDUserID retrieves a row from 'public.project_contributors' as a [ProjectContributor].
//
// Generated from index 'project_contributors_pkey'.
func ProjectContributorByProjectIDUserID(ctx context.Context, db DB, projectID, userID uuid.UUID) (*ProjectContributor, error) {
	// query
	const sqlstr = `SELECT ` +
		`project_id, user_id, role, can_manage_job_posting, created_at, updated_at ` +
		`FROM public.project_contributors ` +
		`WHERE project_id = $1 AND user_id = $2`
	// run
	logf(sqlstr, projectID, userID)
	pc := ProjectContributor{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, projectID, userID).Scan(&pc.ProjectID, &pc.UserID, &pc.Role, &pc.CanManageJobPosting, &pc.CreatedAt, &pc.UpdatedAt); err != nil {
		return nil, logerror(err)
	}
	return &pc, nil
}

// Project returns the Project associated with the [ProjectContributor]'s (ProjectID).
//
// Generated from foreign key 'project_contributors_project_id_fkey'.
func (pc *ProjectContributor) Project(ctx context.Context, db DB) (*Project, error) {
	return ProjectByID(ctx, db, pc.ProjectID)
}

// User returns the User associated with the [ProjectContributor]'s (UserID).
//
// Generated from foreign key 'project_contributors_user_id_fkey'.
func (pc *ProjectContributor) User(ctx context.Context, db DB) (*User, error) {
	return UserByID(ctx, db, pc.UserID)
}
